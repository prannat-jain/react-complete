{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpran\\\\react-app\\\\react-complete\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\n//here useState is used for storing input values\n//states have a benefit over storing values in global variables: we can use two-way binding, i.e pass new values again and again and rerender the page.\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseForm(props) {\n  _s();\n  //use state is empty to store input string in them\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  //alternative way(1)(using single states instead of multiple):\n  //const [userInput, setUserInput] = useState({\n  //  enteredName: '',\n  //  enteredAmount: '',\n  //  enteredDate: '',\n  //});\n\n  //in vanilla js doc.getElementbyId().addEventListener('click',here we just write the value instead of the function thats hidden, that hidden funstion is 'event' ())\n  //event listener function for input\n  const nameChangeHandler = event => {\n    //chack console for more details\n    setEnteredName(event.target.value);\n    //alternative way(1):\n    //setUserInput((prevState) => {\n    //return{ ...prevState, enteredName: event.target.value};\n    //});\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  //we get even object automatically because of listener in onSubmit\n  const submitHandler = event => {\n    //preventdefault will stop the webpage refreshing everytime we submit the form\n    event.preventDefault();\n\n    //expense data object having user input\n    //ultimately we want to send expenseData to App.js array database....\n    //to do that we are going to go child to parent: Expenseform>NewExpense>App.js\n    const expenseData = {\n      name: enteredName,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    //executing function in ExpenseData whose reference/pointer is received by props\n    props.onSaveExpenseData(expenseData);\n    //resetting the fields after form is submitted\n    setEnteredName(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredName,\n          onChange: nameChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseForm, \"GyNYfxz/EOvJDF9J0PA8NDubD+Q=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredName","setEnteredName","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","nameChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","name","amount","date","Date","onSaveExpenseData"],"sources":["C:/Users/jpran/react-app/react-complete/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["//here useState is used for storing input values\r\n//states have a benefit over storing values in global variables: we can use two-way binding, i.e pass new values again and again and rerender the page.\r\nimport React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nfunction ExpenseForm(props) {\r\n  //use state is empty to store input string in them\r\n  const [enteredName, setEnteredName] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  //alternative way(1)(using single states instead of multiple):\r\n  //const [userInput, setUserInput] = useState({\r\n  //  enteredName: '',\r\n  //  enteredAmount: '',\r\n  //  enteredDate: '',\r\n  //});\r\n\r\n  //in vanilla js doc.getElementbyId().addEventListener('click',here we just write the value instead of the function thats hidden, that hidden funstion is 'event' ())\r\n  //event listener function for input\r\n  const nameChangeHandler = (event) => {\r\n    //chack console for more details\r\n    setEnteredName(event.target.value);\r\n    //alternative way(1):\r\n    //setUserInput((prevState) => {\r\n    //return{ ...prevState, enteredName: event.target.value};\r\n    //});\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n  };\r\n\r\n  //we get even object automatically because of listener in onSubmit\r\n  const submitHandler = (event) => {\r\n    //preventdefault will stop the webpage refreshing everytime we submit the form\r\n    event.preventDefault();\r\n\r\n    //expense data object having user input\r\n    //ultimately we want to send expenseData to App.js array database....\r\n    //to do that we are going to go child to parent: Expenseform>NewExpense>App.js\r\n    const expenseData = {\r\n      name: enteredName,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    //executing function in ExpenseData whose reference/pointer is received by props\r\n    props.onSaveExpenseData(expenseData);\r\n    //resetting the fields after form is submitted\r\n    setEnteredName(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Name</label>\r\n          <input type=\"text\" value={enteredName} onChange={nameChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}